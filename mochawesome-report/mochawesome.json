{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2020-11-24T05:08:24.516Z",
    "end": "2020-11-24T05:08:26.532Z",
    "duration": 2016,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "POST /auth",
        "suites": [],
        "tests": [
          {
            "title": "logs user in",
            "fullTitle": "POST /auth logs user in",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request(app)\n    .post('/auth')\n    .send({username: 'kukkui', password: 'kukkui'})\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(200).end((err, res) => {\n      res.status.should.equal(200);\n      res.body.success.should.equal(true);\n      done();\n    });",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:531:17)\n    at processTimers (internal/timers.js:475:7)"
            },
            "isRoot": false,
            "uuid": "0cf0c9e5-a8f3-418a-8cb8-5ecfd6df9179",
            "parentUUID": "a35ab5f8-0400-44c5-be6a-26f92e1dc612",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "a35ab5f8-0400-44c5-be6a-26f92e1dc612",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/home/se02/Desktop/kukkui-sertis-lab-backend/test/test.js",
        "passes": [],
        "failures": [
          {
            "title": "logs user in",
            "fullTitle": "POST /auth logs user in",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request(app)\n    .post('/auth')\n    .send({username: 'kukkui', password: 'kukkui'})\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(200).end((err, res) => {\n      res.status.should.equal(200);\n      res.body.success.should.equal(true);\n      done();\n    });",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:531:17)\n    at processTimers (internal/timers.js:475:7)"
            },
            "isRoot": false,
            "uuid": "0cf0c9e5-a8f3-418a-8cb8-5ecfd6df9179",
            "parentUUID": "a35ab5f8-0400-44c5-be6a-26f92e1dc612",
            "isHook": false,
            "skipped": false
          }
        ],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 0,
        "totalFailures": 1,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": true,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2003,
        "rootEmpty": false
      },
      {
        "title": "post-me-route",
        "suites": [],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "413e9109-d526-4b88-8bb0-8812dffee9f2",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/home/se02/Desktop/kukkui-sertis-lab-backend/test/test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": false,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "posts-all-route",
        "suites": [],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/test.js",
        "uuid": "483039f2-748e-484e-ac85-605489cccc60",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/home/se02/Desktop/kukkui-sertis-lab-backend/test/test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": false,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "30d2e8aa-422a-4eef-997c-af57d3b1c6c3",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "logs user in",
      "fullTitle": "POST /auth logs user in",
      "timedOut": true,
      "duration": 2003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "request(app)\n    .post('/auth')\n    .send({username: 'kukkui', password: 'kukkui'})\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(200).end((err, res) => {\n      res.status.should.equal(200);\n      res.body.success.should.equal(true);\n      done();\n    });",
      "err": {
        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:531:17)\n    at processTimers (internal/timers.js:475:7)"
      },
      "isRoot": false,
      "uuid": "0cf0c9e5-a8f3-418a-8cb8-5ecfd6df9179",
      "parentUUID": "a35ab5f8-0400-44c5-be6a-26f92e1dc612",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [],
  "allFailures": [
    {
      "title": "logs user in",
      "fullTitle": "POST /auth logs user in",
      "timedOut": true,
      "duration": 2003,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "request(app)\n    .post('/auth')\n    .send({username: 'kukkui', password: 'kukkui'})\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(200).end((err, res) => {\n      res.status.should.equal(200);\n      res.body.success.should.equal(true);\n      done();\n    });",
      "err": {
        "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
        "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:531:17)\n    at processTimers (internal/timers.js:475:7)"
      },
      "isRoot": false,
      "uuid": "0cf0c9e5-a8f3-418a-8cb8-5ecfd6df9179",
      "parentUUID": "a35ab5f8-0400-44c5-be6a-26f92e1dc612",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2020
}